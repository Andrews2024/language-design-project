enum {
  INT_TAG=0,
  ARRAY_INT_TAG.
  OP_TAG,
  CALL_TAG.
  LET_TAG.  
  VAR_TAG
} expr_tag_t;


union {
  func_call_t func;
  let_t let;
} expr_union_t;
// if e is an expr_union_t
// then    e.func = interpret e as a func_call_t, e.let = interpret as let_t

/*
To use it:


switch (expr.tag) {
case INT_TAG:
int_t e = expr.e.int;
break;
case LET_TAG:
let_t e = expr.e.let;

}
*/


typedef struct {
  expr_tag_t tag;
  expr_union_t e;
} expr_t;e


struct expr


struct let_t : expr


typeof
dynamic_cast
